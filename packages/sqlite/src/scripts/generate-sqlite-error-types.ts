import {identity} from '../utils/effect.js'
import puppeteer from 'puppeteer'

// USAGE: node ./dist/scripts/generate-sqlite-error-types.js > ./src/sqlite-error.ts
const main = async () => {
  const browser = await puppeteer.launch()
  try {
    const page = await browser.newPage()

    await page.goto('http://www.sqlite.org/c3ref/c_abort.html')

    const preEl = await page.$('pre')
    const preText: string = await page.evaluate((el) => el!.textContent!, preEl)

    const errorTypes = parseErrorSnippet(preText)

    const tsdefs = generateTsTypes(errorTypes)

    console.log(tsdefs)
  } catch (e) {
    console.error(e)
  } finally {
    await browser.close()
  }
}

main()

type ErrorType = {
  errorName: string
  errorCode: number
  description: string
}

const parseErrorSnippet = (snippet: string) => {
  const lines = snippet.trim().split('\n')

  const filteredLines = lines.filter((line) => !line.startsWith('/* ')).map((_) => _.trim())

  const errorTypes = filteredLines.map((line) => {
    // Example:
    // #define SQLITE_INTERNAL     2   /* Internal logic error in SQLite */
    const matches = line.match(/(SQLITE_[A-Z]+)\s+(\d+)\s+\/\*\s(.+)\*\//)

    if (matches === null) {
      throw new Error(`Could not parse line: ${line}`)
    }

    const [, errorName, errorCodeStr, description] = matches

    return identity<ErrorType>({
      errorName: errorName!,
      errorCode: Number.parseInt(errorCodeStr!),
      description: description!.trim(),
    })
  })

  return errorTypes
}

const generateTsTypes = (errorTypes: ErrorType[]) => {
  const tsTypes = errorTypes.map((errorType) => {
    return `\
  /** ${errorType.description} */
  export interface ${errorType.errorName} extends Error {
    code: '${errorType.errorName}'
    errno: ${errorType.errorCode}
    message: string
  }
`
  })

  return `\
// NOTE This file was auto-generated by "scripts/generate-sqlite-error-types.ts"
/* eslint-disable prettier/prettier */

export namespace SqliteError {
  // eslint-disable-next-line prefer-arrow/prefer-arrow-functions
  export function isSqliteError(error: any): error is SqliteError {
    return error.code && error.code.startsWith('SQLITE_')
  }

  export type SqliteError =${errorTypes.map((_) => `\n    | ${_.errorName}`).join('')}

${tsTypes.join('\n')}
}
`
}
